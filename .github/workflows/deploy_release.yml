name: "Deploy release"

on:
  push:
    branches:
      - release
  workflow_dispatch:
    inputs:
      isPreRelease:
        description: 'Is the build pre release?'     
        required: true
        default: true 
        type: boolean

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release
  
jobs:
  build-win:
    runs-on: [windows-latest]
    env:
      VCPKGRS_DYNAMIC: 1
      SDL2_URL: "https://www.libsdl.org/release/SDL2-devel-2.0.14-VC.zip"
      SDL2_TTF_URL: "https://www.libsdl.org/projects/SDL_ttf/release/SDL2_ttf-devel-2.0.15-VC.zip"
      SDL2_PATH: "C:\\SDL"
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive
    - name: Install requests
      run: pip install requests
    - name: Install SDL2
      run: python .github/workflows/win_sdl2.py
    - run: echo "VCPKG_ROOT=$env:VCPKG_INSTALLATION_ROOT" | Out-File -FilePath $env:GITHUB_ENV -Append
    - name: Configure CMake
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DCMAKE_TOOLCHAIN_FILE="$env:VCPKG_ROOT"/scripts/buildsystems/vcpkg.cmake
    - name: Build
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}
      
    - name: Add tag data to enviroment
      run: |
        $output=$(python .github/workflows/get_version.py GViewCore/include/GView.hpp)
        echo "GVIEW_VERSION=$output" | Out-File -FilePath $env:GITHUB_ENV -Append
      
    - name: Create archive
      run: |
        $output=$(7z a "GView-${{ runner.os }}-${{runner.arch}}-${{ env.GVIEW_VERSION }}.zip" D:/a/GView/GView/bin/Release/*.exe)
        echo "$output"
        $output=$(7z a "GView-${{ runner.os }}-${{runner.arch}}-${{ env.GVIEW_VERSION }}.zip" D:/a/GView/GView/bin/Release/*.dll)
        echo "$output"
        $output=$(7z a "GView-${{ runner.os }}-${{runner.arch}}-${{ env.GVIEW_VERSION }}.zip" D:/a/GView/GView/bin/Release/*/*.tpl)
        echo "$output"
        $output=$(7z a "GView-${{ runner.os }}-${{runner.arch}}-${{ env.GVIEW_VERSION }}.zip" D:/a/GView/GView/bin/Release/*/*.gpl)
        echo "$output"
    
    - name: Store Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: windows_artifacts
        path: "GView-${{ runner.os }}-${{runner.arch}}-${{ env.GVIEW_VERSION }}.zip"
        retention-days: 1
     
  build-macos:
    runs-on: [macos-latest]
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive
        
    # - name: Install sdl
    #   run: brew install sdl2
    # - name: Install sdl2_ttf
    #   run: brew install sdl2_ttf
    # - name: Install updated ncurses
    #   run: brew install ncurses
      
    - name: Install vcpkg  
      run: git clone https://github.com/microsoft/vcpkg "$HOME/vcpkg"
      
    - name: Bootstrap vcpkg  
      run: "$HOME/vcpkg/bootstrap-vcpkg.sh"
      
    - name: Export vcpkg  
      run: export VCPKG_ROOT="$HOME/vcpkg"
      
    # - name: List NCurses Files Lib
    #   run: ls -R /usr/local/opt/ncurses/lib
    #   
    # - name: List NCurses Files Include
    #   run: ls -R /usr/local/opt/ncurses/include
    
    - name: List VCPKG_ROOT
      run: ls -R "$VCPKG_ROOT"
      
    - name: Configure CMake
      run: cmake -B ${{github.workspace}}/build -DCMAKE_TOOLCHAIN_FILE="$VCPKG_ROOT/scripts/buildsystems/vcpkg.cmake" -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DOPENSSL_ROOT_DIR=/usr/local/opt/openssl -DOPENSSL_LIBRARIES=/usr/local/opt/openssl/lib
    - name: Build
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}
        
    - name: Add tag data to enviroment
      run: |
        output=$(python .github/workflows/get_version.py GViewCore/include/GView.hpp)
        echo "GVIEW_VERSION=$output" >> $GITHUB_ENV
 
    - name: List Release Files
      run: ls -R /Users/runner/work/GView/GView/bin/Release
 
    - name: List OpenSSL files
      run: ls /usr/local/opt/openssl@1.1/lib/
      
    - name: Copy OpenSSL libs
      run: cp /usr/local/opt/openssl@1.1/lib/*.dylib /Users/runner/work/GView/GView/bin/Release/
      
    - name: Create archive
      working-directory: /Users/runner/work/GView/GView/bin/Release
      run: |
        output=$(zip -9 -r "GView-${{ runner.os }}-${{runner.arch}}-${{ env.GVIEW_VERSION }}.zip" .)
        echo "$output"

    - name: Store Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: apple_artifacts
        path: "/Users/runner/work/GView/GView/bin/Release/GView-${{ runner.os }}-${{runner.arch}}-${{ env.GVIEW_VERSION }}.zip"
        retention-days: 1
        
  build-ubuntu:
    runs-on: [ubuntu-latest]
    env:
      CC: gcc-10
      CXX: g++-10
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive
        
    - name: Update OS
      run: sudo apt-get update -y
      
    # - name: Install SDL2 & SD2ttf
    #   run: | 
    #     sudo apt-get install libsdl2-dev -y
    #     sudo apt-get install libsdl2-ttf-dev -y
        
    - name: GCC & G++ multilib
      run: sudo apt-get install g++-multilib gcc-multilib -y
      
    - name: Configure CMake
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
    - name: Build
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}
      
    - name: Add tag data to enviroment
      run: |
        output=$(python .github/workflows/get_version.py GViewCore/include/GView.hpp)
        echo "GVIEW_VERSION=$output" >> $GITHUB_ENV
      
    - name: List Files
      run: ls -R /home/runner/work/GView/GView/bin/Release
      
    - name: Create archive
      working-directory: /home/runner/work/GView/GView/bin/Release
      run: |
        output=$(zip -9 -r "GView-${{ runner.os }}-${{runner.arch}}-${{ env.GVIEW_VERSION }}.zip" .)
        echo "$output"
    
    - name: Store Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: linux_artifacts
        path: "/home/runner/work/GView/GView/bin/Release/GView-${{ runner.os }}-${{runner.arch}}-${{ env.GVIEW_VERSION }}.zip"
        retention-days: 1     
      
  publish_job:
    name: "Publish to release"
    runs-on: [ubuntu-latest]
    needs: [build-win, build-ubuntu, build-macos]
    steps:
    - uses: actions/checkout@v2

    - name: Add tag data to enviroment
      run: |
        output=$(python .github/workflows/get_version.py GViewCore/include/GView.hpp)
        echo "GVIEW_VERSION=$output" >> $GITHUB_ENV

    - uses: actions/download-artifact@v2
      with:
        name: windows_artifacts
        path: artifacts

    - uses: actions/download-artifact@v2
      with:
        name: linux_artifacts
        path: artifacts

    - uses: actions/download-artifact@v2
      with:
        name: apple_artifacts
        path: artifacts

    - uses: "marvinpinto/action-automatic-releases@latest"
      with:
        repo_token: "${{ secrets.GITHUB_TOKEN }}"
        automatic_release_tag: "${{env.GVIEW_VERSION}}"
        prerelease: true # ${{ github.event.inputs.isPreRelease }}
        title: Build ${{env.GVIEW_VERSION}}
        files: |
            artifacts/*.zip
