name: "Deploy release"

on:
  push:
    branches:
      - build_artefacts
  workflow_dispatch:
    inputs:
      tag-version:
        description: "Release Tag Version"
        required: true
      git-ref:
        description: "Release Git Ref"
        required: true
        default: "master"
      is-draft:
        description: 'Draft Release?'
        required: true
        default: "true"
      isPreRelease:
        description: 'Is the build pre release?'     
        required: true
        default: true 
        type: boolean

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release
  
jobs:
  build-win:
    runs-on: [windows-latest]
    env:
      VCPKGRS_DYNAMIC: 1
      SDL2_URL: "https://www.libsdl.org/release/SDL2-devel-2.0.14-VC.zip"
      SDL2_TTF_URL: "https://www.libsdl.org/projects/SDL_ttf/release/SDL2_ttf-devel-2.0.15-VC.zip"
      SDL2_PATH: "C:\\SDL"
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive
    - name: Install requests
      run: pip install requests
    - name: Install SDL2
      run: python .github/workflows/win_sdl2.py
    - run: echo "VCPKG_ROOT=$env:VCPKG_INSTALLATION_ROOT" | Out-File -FilePath $env:GITHUB_ENV -Append
    - name: Configure CMake
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DCMAKE_TOOLCHAIN_FILE="$env:VCPKG_ROOT"/scripts/buildsystems/vcpkg.cmake
    - name: Build
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}
    
    - name: Store Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: windows_artifacts
        path: D:/a/GView/GView/bin/Release
        retention-days: 1
     
  build-macos:
    runs-on: [macos-latest]
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive
    - name: Install sdl
      run: brew install sdl2
    - name: Install sdl2_ttf
      run: brew install sdl2_ttf
    - name: Install updated ncurses
      run: brew install ncurses
    - name: Configure CMake
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DOPENSSL_ROOT_DIR=/usr/local/opt/openssl -DOPENSSL_LIBRARIES=/usr/local/opt/openssl/lib
    - name: Build
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}
      
    - name: List Files
      run: ls -R /Users/runner/work/GView/GView

    - name: Store Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: apple_artifacts
        path: /Users/runner/work/GView/GView/bin/Release
        retention-days: 1
        
  build-ubuntu:
    runs-on: [ubuntu-latest]
    env:
      CC: gcc-10
      CXX: g++-10
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive
    - name: Update
      run: sudo apt-get update -y
    - name: Install SDL2
      run: sudo apt-get install libsdl2-dev -y
    - name: Install SDL2ttf
      run: sudo apt-get install libsdl2-ttf-dev -y
    - name: Configure CMake
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
    - name: Build
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}
      
    - name: Add tag data to enviroment
      run: |
        output=$(python .github/workflows/get_version.py GViewCore/include/GView.hpp)
        echo "GVIEW_VERSION=$output" >> $GITHUB_ENV
      
    - name: List Files
      run: ls -R /home/runner/work/GView/GView/bin/Release
      
    - name: Create archive
      run: zip -r "GView-${{env.GVIEW_VERSION}}.zip" /home/runner/work/GView/GView/bin/Release
    
    - name: Store Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: linux_artifacts
        path: "GView-${{env.GVIEW_VERSION}}.zip"
        retention-days: 1     
      
  publish_job:
    name: "Publish to release"
    runs-on: [ubuntu-latest]
    needs: [build-win, build-ubuntu, build-macos]
    steps:
    - uses: actions/checkout@v2

    - name: Add tag data to enviroment
      run: |
        output=$(python .github/workflows/get_version.py GViewCore/include/GView.hpp)
        echo "GVIEW_VERSION=$output" >> $GITHUB_ENV

    - uses: actions/download-artifact@v2
      with:
        name: windows_artifacts
        path: artifacts

    - uses: actions/download-artifact@v2
      with:
        name: linux_artifacts
        path: artifacts

    - uses: actions/download-artifact@v2
      with:
        name: apple_artifacts
        path: artifacts

    - uses: "marvinpinto/action-automatic-releases@latest"
      with:
        repo_token: "${{ secrets.GITHUB_TOKEN }}"
        automatic_release_tag: "${{env.GVIEW_VERSION}}"
        prerelease: true # ${{ github.event.inputs.isPreRelease }}
        title: Build ${{env.GVIEW_VERSION}}
        files: |
            artifacts/*.zip
